@page "/borrowslist"

@inject IBorrowRepository _borrowRepository
@inject IBookRepository _bookRepository
@inject IMemberRepository _memberRepository
@inject IJSRuntime _jsRuntime

<_DeleteConfim ConfirmationChanged="ConfirmDeleteClick"></_DeleteConfim>
<div class="row mt-4">
    <div class="col-6">
        <h3 class="card-title text-primary">Borrows List</h3>
    </div>
    <div class="col-5 offset-1">
        <a href="/borrow/create" class="btn btn-primary form-control">Add new borrow</a>
    </div>
    <div class="col-12">
        @if (Borrows.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Member</th>
                        <th>BorrowDate</th>
                        <th>BorrowDeadline</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Borrow in Borrows)
                    {
                        <tr>
                            <td>
                                @_bookRepository.Get(@Borrow.BookId).Title
                            </td>
                            <td>
								@_memberRepository.Get(@Borrow.MemberId).Name
                            </td>
                            <td>
                                @((Borrow.BorrowDate).ToLongDateString())
                            </td>
                            <td>
                                @((Borrow.BorrowDeadline).ToLongDateString())
                            </td>
                            <td>
                                <NavLink href="@($"/borrow/edit/{Borrow.BorrowId}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="() => HandleDelete(Borrow.BorrowId)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (isLoading)
            {
                // Loading
                <div class="text-center">
                    <img src="/images/spinner-blue.gif">
                </div>
            }
            else
            {
                // No records in the DB
                <p>No records found in the database.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<BorrowDto> Borrows { get; set; } = new List<BorrowDto>();
    public bool isLoading = true;
    private int DeleteBorrowId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadBorrows);
    }

    private void LoadBorrows()
    {
        Borrows = _borrowRepository.GetAll();
        isLoading = false;
    }

    private void HandleDelete(int Id)
    {
        DeleteBorrowId = Id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmModal");
    }

    private async Task ConfirmDeleteClick(bool isConfirmed)
    {
        if (isConfirmed && DeleteBorrowId != 0)
        {
            foreach (var borrows in Borrows)
            {
                if (DeleteBorrowId == borrows.BorrowId)
                    _bookRepository.MarkBorrowed(borrows.BookId);
            }
            _borrowRepository.Delete(DeleteBorrowId);
            LoadBorrows();
            _jsRuntime.InvokeVoidAsync("HideDeleteConfirmModal");
        }
    }
}
