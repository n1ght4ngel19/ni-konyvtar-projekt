@page "/borrow/create"
@page "/borrow/edit/{Id:int}"

@inject IJSRuntime _jsRuntime
@inject IBookRepository _bookRepository
@inject IMemberRepository _memberRepository
@inject IBorrowRepository _borrowRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

@using static System.Net.WebRequestMethods;

<h3>@Action borrow</h3>

@if (isLoading)
{ 
	// Loading
	<div class="text-center">
		<img src="/images/spinner-blue.gif">
	</div>
}
else
{	
	<EditForm Model="Borrow" OnValidSubmit="UpdateInsert">
		<DataAnnotationsValidator/>
		@*<ValidationSummary/>*@
		<div class="form-group">
			<label>Select book</label>
			<InputSelect @bind-Value="Borrow.BookId" class="form-select">
				@foreach (BookDto book in Books)
				{
					<option value="@book.BookId">@book.Title (ID: @book.BookId)</option>
				}
				@if (Books.Count() == 0)
				{
					
					<option>No book available</option>
				}
			</InputSelect>
			<ValidationMessage For="() => Borrow.BookId"></ValidationMessage>

			<label>Select member</label>
			<InputSelect @bind-Value="Borrow.MemberId" class="form-select">
				@foreach (MemberDto member in Members)
				{
					<option value="@member.MemberId">@member.Name (ID: @member.MemberId)</option>
				}
			</InputSelect>
			<ValidationMessage For="() => Borrow.MemberId"></ValidationMessage>

			<label>Borrow Date</label>
			<InputDate @bind-Value="Borrow.BorrowDate" class="form-check-inline"></InputDate>
			<ValidationMessage For="() => Borrow.BorrowDate"></ValidationMessage>

			<label>Borrow Deadline</label>
			<InputDate @bind-Value="Borrow.BorrowDeadline" class="form-check-inline"></InputDate>
			<ValidationMessage For="() => Borrow.BorrowDeadline"></ValidationMessage>

		</div>
		<div class="form-group py-2">
			<button class="btn btn-primary">@Action</button>
			<NavLink href="/borrowslist" class="btn btn-secondary">Back to Index</NavLink>
		</div>
	</EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private BorrowDto Borrow { get; set; } = new BorrowDto();
    private String Action { get; set; } = "Add";
    public bool isLoading = true;
    private IEnumerable<BookDto> Books { get; set; } = new List<BookDto>();
    private IEnumerable<MemberDto> Members { get; set; } = new List<MemberDto>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadBookAndMemberData);

        if (Id == 0)
        {
            // Create request
            isLoading = false;
        }
        else
        {
            // Update request
            Action = "Edit";
            await Task.Run(LoadBorrow);
        }

        LoadBookAndMemberData();
        Borrow.BorrowDeadline = (DateTime.Today).AddDays(1);
        Borrow.BorrowDate = DateTime.Today;
    }

    private void UpdateInsert()
    {
        if (Borrow.BorrowDate <= Borrow.BorrowDeadline)
        {
            if (Borrow.BorrowId == 0)
            {
                // Create request
                _borrowRepository.Create(Borrow);
                _bookRepository.MarkBorrowed(Borrow.BookId);
                
                LoadBookAndMemberData();
            }
            else
            {
                // Update request
                _borrowRepository.Update(Borrow);
                LoadBookAndMemberData();
            }

            _navigationManager.NavigateTo("/borrowslist");
        }
    }

	private void LoadBorrow()
	{
		Borrow = _borrowRepository.Get(Id);
		isLoading = false;
	}

	private void LoadBookAndMemberData()
	{
        Books = _bookRepository.GetAll().Where(p => p.IsBorrowed == false);
		Members = _memberRepository.GetAll();
		isLoading = false;
	}
}